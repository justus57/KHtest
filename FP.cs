//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

using System.Xml.Linq;

namespace TremolZFP
{
     public class FP : FPcore
     {
         public FP()
         {
             VersionDef = 2112311201;
         }

         /// <summary>
         /// Start WiFi test on the device the result
         /// </summary>
         public void StartWiFiTest()
         {
             Do("StartWiFiTest");
         }

         /// <summary>
         /// Provides information about the manufacturing number of the CU and PIN number.
         /// </summary>
         public CUnumbersRes ReadCUnumbers()
         {
             return CreateRes<CUnumbersRes>(Do("ReadCUnumbers"));
         }

         /// <summary>
         /// Store Electronic Journal Report from report from date to date to External USB Flash memory, External SD card.
         /// </summary>
         /// <param name="optionReportStorage">2 symbols for destination: 
         ///  - 'J2' - Storage in External USB Flash memory 
         ///  - 'J4' - Storage in External SD card memory 
         ///  - 'Jx' - Storage in External USB Flash memory for JSON 
         ///  - 'JX' - Storage in External SD card memory for JSON</param>
         /// <param name="startRepFromDate">6 symbols for initial date in the DDMMYY format</param>
         /// <param name="endRepFromDate">6 symbols for final date in the DDMMYY format</param>
         public void StoreEJByDate(OptionReportStorage optionReportStorage, DateTime startRepFromDate, DateTime endRepFromDate)
         {
             Do("StoreEJByDate", "OptionReportStorage", optionReportStorage, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
         }

         /// <summary>
         /// Shows a 16-symbols text in the first line and last 16-symbols text in the second line of the external display lines.
         /// </summary>
         /// <param name="text">32 symbols text</param>
         public void DisplayTextLines1and2(string text)
         {
             Do("DisplayTextLines1and2", "Text", text);
         }

         /// <summary>
         /// Provides information about the current date and time.
         /// </summary>
         public DateTime ReadDateTime()
         {
             return CreateRes<DateTime>(Do("ReadDateTime"));
         }

         /// <summary>
         /// Available only if the receipt is not closed. Cancel all sales in the receipt and close it .
         /// </summary>
         public void CancelReceipt()
         {
             Do("CancelReceipt");
         }

         /// <summary>
         /// Provides information about device's idle timeout. This timeout is seconds in which the connection will be closed when there is an inactivity. This information is available if the device has LAN or WiFi. Maximal value - 7200, minimal value 1. 0 is for never close the connection.
         /// </summary>
         public decimal Read_IdleTimeout()
         {
             return CreateRes<decimal>(Do("Read_IdleTimeout"));
         }

         /// <summary>
         /// Read invoice threshold count
         /// </summary>
         public decimal ReadInvoice_Threshold()
         {
             return CreateRes<decimal>(Do("ReadInvoice_Threshold"));
         }

         /// <summary>
         /// Read time threshold minutes
         /// </summary>
         public decimal ReadTimeThreshold_Minutes()
         {
             return CreateRes<decimal>(Do("ReadTimeThreshold_Minutes"));
         }

         /// <summary>
         /// Providing information about server HTTPS address.
         /// </summary>
         public HTTPS_ServerRes ReadHTTPS_Server()
         {
             return CreateRes<HTTPS_ServerRes>(Do("ReadHTTPS_Server"));
         }

         /// <summary>
         /// Program device's MAC address . To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="mACAddress">12 symbols for the MAC address</param>
         public void SetDeviceTCP_MACAddress(string mACAddress)
         {
             Do("SetDeviceTCP_MACAddress", "MACAddress", mACAddress);
         }

         /// <summary>
         /// Provides information about device's GRPS APN.
         /// </summary>
         public GPRS_APNRes ReadGPRS_APN()
         {
             return CreateRes<GPRS_APNRes>(Do("ReadGPRS_APN"));
         }

         /// <summary>
         /// Providing information about device's GPRS user name.
         /// </summary>
         public GPRS_UsernameRes ReadGPRS_Username()
         {
             return CreateRes<GPRS_UsernameRes>(Do("ReadGPRS_Username"));
         }

         /// <summary>
         /// After every change on Idle timeout, LAN/WiFi/GPRS usage, LAN/WiFi/TCP/GPRS password or TCP auto start networks settings this Save command needs to be execute.
         /// </summary>
         public void SaveNetworkSettings()
         {
             Do("SaveNetworkSettings");
         }

         /// <summary>
         /// Provides information about device's network IP address, subnet mask, gateway address, DNS address.
         /// </summary>
         /// <param name="optionAddressType">1 symbol with value: 
         ///  - '2' - IP address 
         ///  - '3' - Subnet Mask 
         ///  - '4' - Gateway address 
         ///  - '5' - DNS address</param>
         public DeviceTCP_AddressesRes ReadDeviceTCP_Addresses(OptionAddressType optionAddressType)
         {
             return CreateRes<DeviceTCP_AddressesRes>(Do("ReadDeviceTCP_Addresses", "OptionAddressType", optionAddressType));
         }

         /// <summary>
         /// Executes the direct command .
         /// </summary>
         /// <param name="input">Raw request to FP</param>
         public string DirectCommand(string input)
         {
             return CreateRes<string>(Do("DirectCommand", "Input", input));
         }

         /// <summary>
         /// Program device's TCP WiFi network name where it will be connected. To apply use -SaveNetworkSettings()
         /// </summary>
         /// <param name="wiFiNameLength">Up to 3 symbols for the WiFi network name len</param>
         /// <param name="wiFiNetworkName">Up to 100 symbols for the device's WiFi ssid network name</param>
         public void SetWiFi_NetworkName(decimal wiFiNameLength, string wiFiNetworkName)
         {
             Do("SetWiFi_NetworkName", "WiFiNameLength", wiFiNameLength, "WiFiNetworkName", wiFiNetworkName);
         }

         /// <summary>
         /// Provides information about documents sending functions .
         /// </summary>
         public DiagnosticsRes ReadDiagnostics()
         {
             return CreateRes<DiagnosticsRes>(Do("ReadDiagnostics"));
         }

         /// <summary>
         /// Shows a 20-symbols text in the upper external display line.
         /// </summary>
         /// <param name="text">16 symbols text</param>
         public void DisplayTextLine1(string text)
         {
             Do("DisplayTextLine1", "Text", text);
         }

         /// <summary>
         /// Provides information about the current VAT rates (the last value stored in FM).
         /// </summary>
         public VATratesRes ReadVATrates()
         {
             return CreateRes<VATratesRes>(Do("ReadVATrates"));
         }

         /// <summary>
         /// Opens a fiscal invoice debit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
         /// </summary>
         /// <param name="companyName">30 symbols for Invoice company name</param>
         /// <param name="clientPINnum">14 symbols for client PIN number</param>
         /// <param name="headQuarters">30 symbols for customer headquarters</param>
         /// <param name="address">30 symbols for Address</param>
         /// <param name="postalCodeAndCity">30 symbols for postal code and city</param>
         /// <param name="exemptionNum">30 symbols for exemption number</param>
         /// <param name="relatedInvoiceNum">19 symbols for the related invoice number in format 
         /// ###################</param>
         /// <param name="traderSystemInvNum">15 symbols for trader system invoice number</param>
         public void OpenDebitNoteWithFreeCustomerData(string companyName, string clientPINnum, string headQuarters, string address, string postalCodeAndCity, string exemptionNum, string relatedInvoiceNum, string traderSystemInvNum)
         {
             Do("OpenDebitNoteWithFreeCustomerData", "CompanyName", companyName, "ClientPINnum", clientPINnum, "HeadQuarters", headQuarters, "Address", address, "PostalCodeAndCity", postalCodeAndCity, "ExemptionNum", exemptionNum, "RelatedInvoiceNum", relatedInvoiceNum, "TraderSystemInvNum", traderSystemInvNum);
         }

         /// <summary>
         /// Provides information about the number of the last issued receipt.
         /// </summary>
         public LastAndTotalReceiptNumRes ReadLastAndTotalReceiptNum()
         {
             return CreateRes<LastAndTotalReceiptNumRes>(Do("ReadLastAndTotalReceiptNum"));
         }

         /// <summary>
         /// Clears the external display.
         /// </summary>
         public void ClearDisplay()
         {
             Do("ClearDisplay");
         }

         /// <summary>
         /// Program device's TCP network DHCP enabled or disabled. To apply use -SaveNetworkSettings()
         /// </summary>
         /// <param name="optionDHCPEnabled">1 symbol with value: 
         ///  - '0' - Disabled 
         ///  - '1' - Enabled</param>
         public void SetDHCP_Enabled(OptionDHCPEnabled optionDHCPEnabled)
         {
             Do("SetDHCP_Enabled", "OptionDHCPEnabled", optionDHCPEnabled);
         }

         /// <summary>
         /// Program device's GPRS APN. To apply use -SaveNetworkSettings()
         /// </summary>
         /// <param name="gprsAPNlength">Up to 3 symbols for the APN len</param>
         /// <param name="aPN">Up to 100 symbols for the device's GPRS APN</param>
         public void SetGPRS_APN(decimal gprsAPNlength, string aPN)
         {
             Do("SetGPRS_APN", "gprsAPNlength", gprsAPNlength, "APN", aPN);
         }

         /// <summary>
         /// Read GPRS APN authentication type
         /// </summary>
         public OptionAuthenticationType ReadGPRS_AuthenticationType()
         {
             return CreateRes<OptionAuthenticationType>(Do("ReadGPRS_AuthenticationType"));
         }

         /// <summary>
         /// Stores the Manufacturing number into the operative memory.
         /// </summary>
         /// <param name="password">6-symbols string</param>
         /// <param name="serialNum">20 symbols Manufacturing number</param>
         public void SetSerialNum(string password, string serialNum)
         {
             Do("SetSerialNum", "Password", password, "SerialNum", serialNum);
         }

         /// <summary>
         ///  Reads raw bytes from FP.
         /// </summary>
         /// <param name="count">How many bytes to read if EndChar is not specified</param>
         /// <param name="endChar">The character marking the end of the data. If present Count parameter is ignored.</param>
         public byte[] RawRead(decimal count, string endChar)
         {
             return CreateRes<byte[]>(Do("RawRead", "Count", count, "EndChar", endChar));
         }

         /// <summary>
         /// Scan and print available wifi networks
         /// </summary>
         public void ScanAndPrintWifiNetworks()
         {
             Do("ScanAndPrintWifiNetworks");
         }

         /// <summary>
         /// Provides information about device's DHCP status
         /// </summary>
         public OptionDHCPEnabled ReadDHCP_Status()
         {
             return CreateRes<OptionDHCPEnabled>(Do("ReadDHCP_Status"));
         }

         /// <summary>
         /// Shows the current date and time on the external display.
         /// </summary>
         public void DisplayDateTime()
         {
             Do("DisplayDateTime");
         }

         /// <summary>
         /// Program device's autostart TCP conection in sale/line mode. To apply use -SaveNetworkSettings()
         /// </summary>
         /// <param name="optionTCPAutoStart">1 symbol with value: 
         ///  - '0' - No 
         ///  - '1' - Yes</param>
         public void SetTCP_AutoStart(OptionTCPAutoStart optionTCPAutoStart)
         {
             Do("SetTCP_AutoStart", "OptionTCPAutoStart", optionTCPAutoStart);
         }

         /// <summary>
         /// Selects the active communication module - LAN or WiFi. This option can be set only if the device has both modules at the same time. To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="optionUsedModule">1 symbol with value: 
         ///  - '1' - LAN module 
         ///  - '2' - WiFi module</param>
         public void SetTCP_ActiveModule(OptionUsedModule optionUsedModule)
         {
             Do("SetTCP_ActiveModule", "OptionUsedModule", optionUsedModule);
         }

         /// <summary>
         /// Provides information about which module the device is in use: LAN or WiFi module. This information can be provided if the device has mounted both modules.
         /// </summary>
         public OptionUsedModule ReadTCP_UsedModule()
         {
             return CreateRes<OptionUsedModule>(Do("ReadTCP_UsedModule"));
         }

         /// <summary>
         /// Provides information about device's MAC address.
         /// </summary>
         public string ReadTCP_MACAddress()
         {
             return CreateRes<string>(Do("ReadTCP_MACAddress"));
         }

         /// <summary>
         /// Closes the opened fiscal receipt and returns receipt info.
         /// </summary>
         public CloseReceiptRes CloseReceipt()
         {
             return CreateRes<CloseReceiptRes>(Do("CloseReceipt"));
         }

         /// <summary>
         /// Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
         /// </summary>
         /// <param name="companyName">30 symbols for Invoice company name</param>
         /// <param name="clientPINnum">14 symbols for client PIN number</param>
         /// <param name="headQuarters">30 symbols for customer headquarters</param>
         /// <param name="address">30 symbols for Address</param>
         /// <param name="postalCodeAndCity">30 symbols for postal code and city</param>
         /// <param name="exemptionNum">30 symbols for exemption number</param>
         /// <param name="relatedInvoiceNum">19 symbols for the related invoice number in format 
         /// ###################</param>
         /// <param name="traderSystemInvNum">15 symbols for trader system invoice number</param>
         public void OpenCreditNoteWithFreeCustomerData(string companyName, string clientPINnum, string headQuarters, string address, string postalCodeAndCity, string exemptionNum, string relatedInvoiceNum, string traderSystemInvNum)
         {
             Do("OpenCreditNoteWithFreeCustomerData", "CompanyName", companyName, "ClientPINnum", clientPINnum, "HeadQuarters", headQuarters, "Address", address, "PostalCodeAndCity", postalCodeAndCity, "ExemptionNum", exemptionNum, "RelatedInvoiceNum", relatedInvoiceNum, "TraderSystemInvNum", traderSystemInvNum);
         }

         /// <summary>
         /// Shows a 16-symbols text in the lower external display line.
         /// </summary>
         /// <param name="text">16 symbols text</param>
         public void DisplayTextLine2(string text)
         {
             Do("DisplayTextLine2", "Text", text);
         }

         /// <summary>
         /// Program device's TCP WiFi password where it will be connected. To apply use -SaveNetworkSettings()
         /// </summary>
         /// <param name="passLength">Up to 3 symbols for the WiFi password len</param>
         /// <param name="password">Up to 100 symbols for the device's WiFi password</param>
         public void SetWiFi_Password(decimal passLength, string password)
         {
             Do("SetWiFi_Password", "PassLength", passLength, "Password", password);
         }

         /// <summary>
         /// Provide information from the last communication with the server.
         /// </summary>
         /// <param name="optionServerResponse">1 symbol with value 
         /// - 'R' - At send receipt 
         /// - 'Z' - At send EOD</param>
         /// <param name="optionTransactionType">1 symbol with value 
         /// - 'c' - Error Code 
         /// - 'm' - Error Message 
         /// - 's' - Status 
         /// - 'e' - Exception Message</param>
         public InfoFromLastServerCommunicationRes ReadInfoFromLastServerCommunication(OptionServerResponse optionServerResponse, OptionTransactionType optionTransactionType)
         {
             return CreateRes<InfoFromLastServerCommunicationRes>(Do("ReadInfoFromLastServerCommunication", "OptionServerResponse", optionServerResponse, "OptionTransactionType", optionTransactionType));
         }

         /// <summary>
         /// Confirm PIN number.
         /// </summary>
         /// <param name="password">6-symbols string</param>
         public void ConfirmFiscalization(string password)
         {
             Do("ConfirmFiscalization", "Password", password);
         }

         /// <summary>
         /// Store whole Electronic Journal report to External USB Flash memory, External SD card.
         /// </summary>
         /// <param name="optionReportStorage">2 symbols for destination: 
         ///  - 'J2' - Storage in External USB Flash memory 
         ///  - 'J4' - Storage in External SD card memory 
         ///  - 'Jx' - Storage in External USB Flash memory for JSON 
         ///  - 'JX' - Storage in External SD card memory for JSON</param>
         public void StoreEJ(OptionReportStorage optionReportStorage)
         {
             Do("StoreEJ", "OptionReportStorage", optionReportStorage);
         }

         /// <summary>
         /// FlagsModule is a char with bits representing modules supported by the firmware
         /// </summary>
         public DeviceModuleSupportByFirmwareRes ReadDeviceModuleSupportByFirmware()
         {
             return CreateRes<DeviceModuleSupportByFirmwareRes>(Do("ReadDeviceModuleSupportByFirmware"));
         }

         /// <summary>
         /// Providing information about WiFi password where the device is connected.
         /// </summary>
         public WiFi_PasswordRes ReadWiFi_Password()
         {
             return CreateRes<WiFi_PasswordRes>(Do("ReadWiFi_Password"));
         }

         /// <summary>
         /// Provides information about device's NTP address.
         /// </summary>
         public NTP_AddressRes ReadNTP_Address()
         {
             return CreateRes<NTP_AddressRes>(Do("ReadNTP_Address"));
         }

         /// <summary>
         /// Provides information about the accumulated amounts and refunded amounts by VAT class in case that CU regularly informs about the Z report(7C)
         /// </summary>
         public DailyAmountsByVATRes ReadDailyAmountsByVAT()
         {
             return CreateRes<DailyAmountsByVATRes>(Do("ReadDailyAmountsByVAT"));
         }

         /// <summary>
         /// Reads all messages from log
         /// </summary>
         public string ReadTotalMessagesCount()
         {
             return CreateRes<string>(Do("ReadTotalMessagesCount"));
         }

         /// <summary>
         /// Programs invoice threshold count
         /// </summary>
         /// <param name="value">Up to 5 symbols for value</param>
         public void SetInvoice_ThresholdCount(decimal value)
         {
             Do("SetInvoice_ThresholdCount", "Value", value);
         }

         /// <summary>
         /// Program device used to talk with the server . To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="optionModule">1 symbol with value: 
         ///  - '0' - GSM 
         ///  - '1' - LAN/WiFi</param>
         public void SetServer_UsedComModule(OptionModule optionModule)
         {
             Do("SetServer_UsedComModule", "OptionModule", optionModule);
         }

         /// <summary>
         /// Program device's TCP password. To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="passLength">Up to 3 symbols for the password len</param>
         /// <param name="password">Up to 100 symbols for the TCP password</param>
         public void SetTCP_Password(decimal passLength, string password)
         {
             Do("SetTCP_Password", "PassLength", passLength, "Password", password);
         }

         /// <summary>
         /// Programs GPRS APN authentication type
         /// </summary>
         /// <param name="optionAuthenticationType">1 symbol with value: 
         /// - '0' - None 
         /// - '1' - PAP 
         /// - '2' - CHAP 
         /// - '3' - PAP or CHAP</param>
         public void SetGPRS_AuthenticationType(OptionAuthenticationType optionAuthenticationType)
         {
             Do("SetGPRS_AuthenticationType", "OptionAuthenticationType", optionAuthenticationType);
         }

         /// <summary>
         /// Read the current status of the receipt.
         /// </summary>
         public CurrentReceiptInfoRes ReadCurrentReceiptInfo()
         {
             return CreateRes<CurrentReceiptInfoRes>(Do("ReadCurrentReceiptInfo"));
         }

         /// <summary>
         /// Read whole Electronic Journal report from beginning to the end.
         /// </summary>
         /// <param name="optionReadEJStorage">2 symbols for destination: 
         ///  - 'J0' - Reading to PC 
         ///  - 'JY' - Reading to PC for JSON</param>
         public void ReadEJ(OptionReadEJStorage optionReadEJStorage)
         {
             Do("ReadEJ", "OptionReadEJStorage", optionReadEJStorage);
         }

         /// <summary>
         /// The device scan out the list of available WiFi networks.
         /// </summary>
         public void ScanWiFiNetworks()
         {
             Do("ScanWiFiNetworks");
         }

         /// <summary>
         /// Program device's network IP address, subnet mask, gateway address, DNS address. To apply use -SaveNetworkSettings()
         /// </summary>
         /// <param name="optionAddressType">1 symbol with value: 
         ///  - '2' - IP address 
         ///  - '3' - Subnet Mask 
         ///  - '4' - Gateway address 
         ///  - '5' - DNS address</param>
         /// <param name="deviceAddress">15 symbols for the selected address</param>
         public void SetDeviceTCP_Addresses(OptionAddressType optionAddressType, string deviceAddress)
         {
             Do("SetDeviceTCP_Addresses", "OptionAddressType", optionAddressType, "DeviceAddress", deviceAddress);
         }

         /// <summary>
         /// Provides detailed 6-byte information about the current status of the CU.
         /// </summary>
         public StatusRes ReadStatus()
         {
             return CreateRes<StatusRes>(Do("ReadStatus"));
         }

         /// <summary>
         /// Opens a fiscal receipt assigned to the specified operator number and operator password, parameters for receipt format and VAT type.
         /// </summary>
         /// <param name="optionReceiptFormat">1 symbol with value: 
         ///  - '1' - Detailed 
         ///  - '0' - Brief</param>
         /// <param name="traderSystemInvNum">15 symbols for trader system invoice number</param>
         public void OpenReceipt(OptionReceiptFormat optionReceiptFormat, string traderSystemInvNum)
         {
             Do("OpenReceipt", "OptionReceiptFormat", optionReceiptFormat, "TraderSystemInvNum", traderSystemInvNum);
         }

         /// <summary>
         /// Sets the date and time and current values.
         /// </summary>
         /// <param name="dateTime">Date Time parameter in format: DD-MM-YY HH:MM</param>
         public void SetDateTime(DateTime dateTime)
         {
             Do("SetDateTime", "DateTime", dateTime);
         }

         /// <summary>
         /// Register the sell (for correction use minus sign in the price field) of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.
         /// </summary>
         /// <param name="namePLU">36 symbols for article's name</param>
         /// <param name="optionVATClass">1 symbol for article's VAT class with optional values:" 
         ///  - 'A' - VAT Class A 
         ///  - 'B' - VAT Class B 
         ///  - 'C' - VAT Class C 
         ///  - 'D' - VAT Class D 
         ///  - 'E' - VAT Class E</param>
         /// <param name="price">Up to 10 symbols for article's price</param>
         /// <param name="measureUnit">3 symbols for measure unit</param>
         /// <param name="hSCode">10 symbols for HS Code in format XXXX.XX.XX</param>
         /// <param name="hSName">20 symbols for HS Name</param>
         /// <param name="vATGrRate">Up to 5 symbols for programmable VAT rate</param>
         /// <param name="quantity">1 to 10 symbols for quantity</param>
         /// <param name="discAddP">1 to 7 for percentage of discount/addition</param>
         public void SellPLUfromExtDB(string namePLU, OptionVATClass optionVATClass, decimal price, string measureUnit, string hSCode, string hSName, decimal vATGrRate, decimal? quantity, decimal? discAddP)
         {
             Do("SellPLUfromExtDB", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "MeasureUnit", measureUnit, "HSCode", hSCode, "HSName", hSName, "VATGrRate", vATGrRate, "Quantity", quantity, "DiscAddP", discAddP);
         }

         /// <summary>
         /// Start GPRS test on the device the result
         /// </summary>
         public void StartGPRStest()
         {
             Do("StartGPRStest");
         }

         /// <summary>
         /// Opens a fiscal invoice receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
         /// </summary>
         /// <param name="companyName">30 symbols for Invoice company name</param>
         /// <param name="clientPINnum">14 symbols for client PIN number</param>
         /// <param name="headQuarters">30 symbols for customer headquarters</param>
         /// <param name="address">30 symbols for Address</param>
         /// <param name="postalCodeAndCity">30 symbols for postal code and city</param>
         /// <param name="exemptionNum">30 symbols for exemption number</param>
         /// <param name="traderSystemInvNum">15 symbols for trader system invoice number</param>
         public void OpenInvoiceWithFreeCustomerData(string companyName, string clientPINnum, string headQuarters, string address, string postalCodeAndCity, string exemptionNum, string traderSystemInvNum)
         {
             Do("OpenInvoiceWithFreeCustomerData", "CompanyName", companyName, "ClientPINnum", clientPINnum, "HeadQuarters", headQuarters, "Address", address, "PostalCodeAndCity", postalCodeAndCity, "ExemptionNum", exemptionNum, "TraderSystemInvNum", traderSystemInvNum);
         }

         /// <summary>
         /// Program device's GPRS password. To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="passLength">Up to 3 symbols for the GPRS password len</param>
         /// <param name="password">Up to 100 symbols for the device's GPRS password</param>
         public void SetGPRS_Password(decimal passLength, string password)
         {
             Do("SetGPRS_Password", "PassLength", passLength, "Password", password);
         }

         /// <summary>
         /// Restore default parameters of the device.
         /// </summary>
         /// <param name="password">6-symbols string</param>
         public void SoftwareReset(string password)
         {
             Do("SoftwareReset", "Password", password);
         }

         /// <summary>
         /// Provides information for the daily fiscal report  with zeroing and fiscal memory record, preceded by Electronic Journal report.
         /// </summary>
         public void DailyReport()
         {
             Do("DailyReport");
         }

         /// <summary>
         /// Provides information about device's TCP password.
         /// </summary>
         public TCP_PasswordRes ReadTCP_Password()
         {
             return CreateRes<TCP_PasswordRes>(Do("ReadTCP_Password"));
         }

         /// <summary>
         /// Stores a block containing the values of the VAT rates into the CU
         /// </summary>
         /// <param name="password">6-symbols string</param>
         /// <param name="vATrateA">Value of VAT rate A from 2 to 6 symbols with format ##.##</param>
         /// <param name="vATrateB">Value of VAT rate B from 2 to 6 symbols with format ##.##</param>
         /// <param name="vATrateC">Value of VAT rate C from 2 to 6 symbols with format ##.##</param>
         /// <param name="vATrateD">Value of VAT rate D from 2 to 6 symbols with format ##.##</param>
         /// <param name="vATrateE">Value of VAT rate E from 2 to 6 symbols with format ##.##</param>
         public void ProgVATrates(string password, decimal vATrateA, decimal vATrateB, decimal vATrateC, decimal vATrateD, decimal vATrateE)
         {
             Do("ProgVATrates", "Password", password, "VATrateA", vATrateA, "VATrateB", vATrateB, "VATrateC", vATrateC, "VATrateD", vATrateD, "VATrateE", vATrateE);
         }

         /// <summary>
         /// Program device's NTP address . To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="addressLen">Up to 3 symbols for the address length</param>
         /// <param name="nTPAddress">50 symbols for the device's NTP address</param>
         public void SetDeviceNTP_Address(decimal addressLen, string nTPAddress)
         {
             Do("SetDeviceNTP_Address", "AddressLen", addressLen, "NTPAddress", nTPAddress);
         }

         /// <summary>
         /// Read Electronic Journal Report initial date to report end date.
         /// </summary>
         /// <param name="optionReadEJStorage">2 symbols for destination: 
         ///  - 'J0' - Reading to PC 
         ///  - 'JY' - Reading to PC for JSON</param>
         /// <param name="startRepFromDate">6 symbols for initial date in the DDMMYY format</param>
         /// <param name="endRepFromDate">6 symbols for final date in the DDMMYY format</param>
         public void ReadEJByDate(OptionReadEJStorage optionReadEJStorage, DateTime startRepFromDate, DateTime endRepFromDate)
         {
             Do("ReadEJByDate", "OptionReadEJStorage", optionReadEJStorage, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
         }

         /// <summary>
         /// Informs about the issued document
         /// </summary>
         public void InfoLastReceiptDuplicate()
         {
             Do("InfoLastReceiptDuplicate");
         }

         /// <summary>
         /// Program device's idle timeout setting. Set timeout for closing the connection if there is an inactivity. Maximal value - 7200, minimal value 1. 0 is for never close the connection. This option can be used only if the device has LAN or WiFi. To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="idleTimeout">4 symbols for Idle timeout in format ####</param>
         public void SetIdle_Timeout(decimal idleTimeout)
         {
             Do("SetIdle_Timeout", "IdleTimeout", idleTimeout);
         }

         /// <summary>
         /// Provides information about if the TCP connection autostart when the device enter in Line/Sale mode.
         /// </summary>
         public OptionTCPAutoStart ReadTCP_AutoStartStatus()
         {
             return CreateRes<OptionTCPAutoStart>(Do("ReadTCP_AutoStartStatus"));
         }

         /// <summary>
         /// Provides information about device's GPRS password.
         /// </summary>
         public GPRS_PasswordRes ReadGPRS_Password()
         {
             return CreateRes<GPRS_PasswordRes>(Do("ReadGPRS_Password"));
         }

         /// <summary>
         /// Read device communication usage with server
         /// </summary>
         public OptionModule ReadServer_UsedComModule()
         {
             return CreateRes<OptionModule>(Do("ReadServer_UsedComModule"));
         }

         /// <summary>
         /// Reads specific message number
         /// </summary>
         /// <param name="messageNum">2 symbols for total number of messages</param>
         public SpecificMessageRes ReadSpecificMessage(string messageNum)
         {
             return CreateRes<SpecificMessageRes>(Do("ReadSpecificMessage", "MessageNum", messageNum));
         }

         /// <summary>
         /// Programs server HTTPS address.
         /// </summary>
         /// <param name="paramLength">Up to 3 symbols for parameter length</param>
         /// <param name="address">50 symbols for address</param>
         public void SetHTTPS_Address(decimal paramLength, string address)
         {
             Do("SetHTTPS_Address", "ParamLength", paramLength, "Address", address);
         }

         /// <summary>
         /// Stores PIN number in operative memory.
         /// </summary>
         /// <param name="password">6-symbols string</param>
         /// <param name="pINnum">11 symbols for PIN registration number</param>
         public void SetPINnumber(string password, string pINnum)
         {
             Do("SetPINnumber", "Password", password, "PINnum", pINnum);
         }

         /// <summary>
         /// Read/Store Invoice receipt copy to External USB Flash memory, External SD card.
         /// </summary>
         /// <param name="optionInvoiceCopy">2 symbols for destination: 
         ///  - 'J0' - Reading  
         ///  - 'J2' - Storage in External USB Flash memory. 
         ///  - 'J4' - Storage in External SD card memory</param>
         /// <param name="cUInvoiceNum">10 symbols for Invoice receipt Number.</param>
         public void ReadOrStoreInvoiceCopy(OptionInvoiceCopy optionInvoiceCopy, string cUInvoiceNum)
         {
             Do("ReadOrStoreInvoiceCopy", "OptionInvoiceCopy", optionInvoiceCopy, "CUInvoiceNum", cUInvoiceNum);
         }

         /// <summary>
         /// Start LAN test on the device the result
         /// </summary>
         public void StartLANtest()
         {
             Do("StartLANtest");
         }

         /// <summary>
         /// FlagsModule is a char with bits representing modules supported by the device.
         /// </summary>
         public DeviceModuleSupportRes ReadDeviceModuleSupport()
         {
             return CreateRes<DeviceModuleSupportRes>(Do("ReadDeviceModuleSupport"));
         }

         /// <summary>
         /// Provides information about WiFi network name where the device is connected.
         /// </summary>
         public WiFi_NetworkNameRes ReadWiFi_NetworkName()
         {
             return CreateRes<WiFi_NetworkNameRes>(Do("ReadWiFi_NetworkName"));
         }

         /// <summary>
         /// Provides information about the device version.
         /// </summary>
         public string ReadVersion()
         {
             return CreateRes<string>(Do("ReadVersion"));
         }

         /// <summary>
         ///  Writes raw bytes to FP 
         /// </summary>
         /// <param name="bytes">The bytes in BASE64 ecoded string to be written to FP</param>
         public void RawWrite(byte[] bytes)
         {
             Do("RawWrite", "Bytes", bytes);
         }

         /// <summary>
         /// Programs time threshold minutes
         /// </summary>
         /// <param name="value">Up to 5 symbols for value</param>
         public void SetTime_ThresholdMinutes(decimal value)
         {
             Do("SetTime_ThresholdMinutes", "Value", value);
         }

         public void ApplyClientLibraryDefinitions()
         {
             SendDefinitions(XElement.Parse(defs));
         }

#region Defs
         public string defs = @"<Defs>
  <ServerStartupSettings>
    <Encoding CodePage=""1252"" EncodingName=""Western European (Windows)"" />
    <GenerationTimeStamp>2112311201</GenerationTimeStamp>
    <SignalFD>0</SignalFD>
    <SilentFindDevice>0</SilentFindDevice>
    <EM>0</EM>
  </ServerStartupSettings>
  <Command Name=""StartWiFiTest"" CmdByte=""0x4E"">
    <FPOperation>Start WiFi test on the device the result</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'W'><;><'T'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadCUnumbers"" CmdByte=""0x60"">
    <FPOperation>Provides information about the manufacturing number of the CU and PIN number.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""SerialNumber"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols for individual number of the CU</Desc>
      </Res>
      <Res Name=""PINnumber"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for pin number</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<SerialNumber[20]><;><PINnumber[11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""StoreEJByDate"" CmdByte=""0x7C"">
    <FPOperation>Store Electronic Journal Report from report from date to date to External USB Flash memory, External SD card.</FPOperation>
    <Args>
      <Arg Name=""OptionReportStorage"" Value="""" Type=""Option"" MaxLen=""2"">
        <Options>
          <Option Name=""Storage in External SD card memory"" Value=""J4"" />
          <Option Name=""Storage in External SD card memory for JSON"" Value=""JX"" />
          <Option Name=""Storage in External USB Flash memory"" Value=""J2"" />
          <Option Name=""Storage in External USB Flash memory for JSON"" Value=""Jx"" />
        </Options>
        <Desc>2 symbols for destination: 
 - 'J2' - Storage in External USB Flash memory 
 - 'J4' - Storage in External SD card memory 
 - 'Jx' - Storage in External USB Flash memory for JSON 
 - 'JX' - Storage in External SD card memory for JSON</Desc>
      </Arg>
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartRepFromDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for initial date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""EndRepFromDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for final date in the DDMMYY format</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<OptionReportStorage[2]> <;> <'D'> <;> <StartRepFromDate ""DDMMYY""> <;> <EndRepFromDate ""DDMMYY""> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""DisplayTextLines1and2"" CmdByte=""0x27"">
    <FPOperation>Shows a 16-symbols text in the first line and last 16-symbols text in the second line of the external display lines.</FPOperation>
    <Args>
      <Arg Name=""Text"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols text</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Text[32]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDateTime"" CmdByte=""0x68"">
    <FPOperation>Provides information about the current date and time.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""DateTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>Date Time parameter in format: DD-MM-YY [Space] hh:mm</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<DateTime ""DD-MM-YYYY HH:MM"">]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""CancelReceipt"" CmdByte=""0x39"">
    <FPOperation>Available only if the receipt is not closed. Cancel all sales in the receipt and close it .</FPOperation>
  </Command>
  <Command Name=""Read_IdleTimeout"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's idle timeout. This timeout is seconds in which the connection will be closed when there is an inactivity. This information is available if the device has LAN or WiFi. Maximal value - 7200, minimal value 1. 0 is for never close the connection.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'Z'><;><'I'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""IdleTimeout"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for password in format ####</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'Z'><;><'I'><;><IdleTimeout[4]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadInvoice_Threshold"" CmdByte=""0x4E"">
    <FPOperation>Read invoice threshold count</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'I'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""Value"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for value</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'I'><;><Value[1..5]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadTimeThreshold_Minutes"" CmdByte=""0x4E"">
    <FPOperation>Read time threshold minutes</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'T'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""Value"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for value</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'T'><;><Value[1..5]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadHTTPS_Server"" CmdByte=""0x4E"">
    <FPOperation>Providing information about server HTTPS address.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""H"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'H'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""C"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""ParamLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for parameter length</Desc>
      </Res>
      <Res Name=""Address"" Value="""" Type=""Text"" MaxLen=""50"">
        <Desc>50 symbols for address</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'C'><;><ParamLength[1..3]><;><Address[50]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetDeviceTCP_MACAddress"" CmdByte=""0x4E"">
    <FPOperation>Program device's MAC address . To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""MACAddress"" Value="""" Type=""Text"" MaxLen=""12"">
        <Desc>12 symbols for the MAC address</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'T'><;><'6'> <;><MACAddress[12]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadGPRS_APN"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's GRPS APN.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'A'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""gprsAPNlength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the APN length</Desc>
      </Res>
      <Res Name=""APN"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>(APN) Up to 100 symbols for the device's GPRS APN</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'G'><;><'A'><;><gprsAPNlength[1..3]><;><APN[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadGPRS_Username"" CmdByte=""0x4E"">
    <FPOperation>Providing information about device's GPRS user name.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'U'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""gprsUserNameLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the GPRS username length</Desc>
      </Res>
      <Res Name=""Username"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS username</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'G'><;><'U'><;><gprsUserNameLength[1..3]><;><Username[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SaveNetworkSettings"" CmdByte=""0x4E"">
    <FPOperation>After every change on Idle timeout, LAN/WiFi/GPRS usage, LAN/WiFi/TCP/GPRS password or TCP auto start networks settings this Save command needs to be execute.</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'P'><;><'A'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDeviceTCP_Addresses"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's network IP address, subnet mask, gateway address, DNS address.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionAddressType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""DNS address"" Value=""5"" />
          <Option Name=""Gateway address"" Value=""4"" />
          <Option Name=""IP address"" Value=""2"" />
          <Option Name=""Subnet Mask"" Value=""3"" />
        </Options>
        <Desc>1 symbol with value: 
 - '2' - IP address 
 - '3' - Subnet Mask 
 - '4' - Gateway address 
 - '5' - DNS address</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'R'><;><'T'><;><AddressType[1]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionAddressType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""DNS address"" Value=""5"" />
          <Option Name=""Gateway address"" Value=""4"" />
          <Option Name=""IP address"" Value=""2"" />
          <Option Name=""Subnet Mask"" Value=""3"" />
        </Options>
        <Desc>(Address type) 1 symbol with value: 
 - '2' - IP address 
 - '3' - Subnet Mask 
 - '4' - Gateway address 
 - '5' - DNS address</Desc>
      </Res>
      <Res Name=""DeviceAddress"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for the device's addresses</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'T'><;>< AddressType[1]><;><DeviceAddress[15]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""DirectCommand"" CmdByte=""0xF1"">
    <FPOperation>Executes the direct command .</FPOperation>
    <Args>
      <Arg Name=""Input"" Value="""" Type=""Text"" MaxLen=""200"">
        <Desc>Raw request to FP</Desc>
      </Arg>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Output"" Value="""" Type=""Text"" MaxLen=""200"">
        <Desc>FP raw response</Desc>
      </Res>
    </Response>
  </Command>
  <Command Name=""SetWiFi_NetworkName"" CmdByte=""0x4E"">
    <FPOperation>Program device's TCP WiFi network name where it will be connected. To apply use -SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""WiFiNameLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the WiFi network name len</Desc>
      </Arg>
      <Arg Name=""WiFiNetworkName"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's WiFi ssid network name</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'W'><;><'N'><;><WiFiNameLength[1..3]><;><WiFiNetworkName[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDiagnostics"" CmdByte=""0x22"">
    <FPOperation>Provides information about documents sending functions .</FPOperation>
    <Response ACK=""false"">
      <Res Name=""OptionDeviceType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""A Type"" Value=""1"" />
          <Option Name=""B Type"" Value=""2"" />
        </Options>
        <Desc>1 symbol for device type: 
 - '1' - A Type 
 - '2' - B Type</Desc>
      </Res>
      <Res Name=""SDIdxPos"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for current SD index position of last sent receipt</Desc>
      </Res>
      <Res Name=""LastInvoiceCUNum"" Value="""" Type=""Text"" MaxLen=""19"">
        <Desc>19 symbols for number of last invoice according the CU</Desc>
      </Res>
      <Res Name=""LastInvoiceDate"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6 symbols for last invoice date in the DDMMYY format</Desc>
      </Res>
      <Res Name=""LastEODDate"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6 symbols for last sent EOD in the DDMMYY format</Desc>
      </Res>
      <Res Name=""InvoicesSent"" Value="""" Type=""Text"" MaxLen=""4"">
        <Desc>4 symbold for number of invoices sent for the current day</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<DeviceType[1]> <;> <SDIdxPos[10]> <;> <LastInvoiceCUNum[19]> <;> <LastInvoiceDate[6]> <;> <LastEODDate[6]> <;> <InvoicesSent[4]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""DisplayTextLine1"" CmdByte=""0x25"">
    <FPOperation>Shows a 20-symbols text in the upper external display line.</FPOperation>
    <Args>
      <Arg Name=""Text"" Value="""" Type=""Text"" MaxLen=""16"">
        <Desc>16 symbols text</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Text[16]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadVATrates"" CmdByte=""0x62"">
    <FPOperation>Provides information about the current VAT rates (the last value stored in FM).</FPOperation>
    <Response ACK=""false"">
      <Res Name=""VATrateA"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>(VAT rate A) Up to 7 symbols for VATrates of VAT class A in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrateB"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>(VAT rate B) Up to 7 symbols for VATrates of VAT class B in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrateC"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>(VAT rate C) Up to 7 symbols for VATrates of VAT class C in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrateD"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>(VAT rate D) Up to 7 symbols for VATrates of VAT class D in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrateE"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>(VAT rate E) Up to 7 symbols for VATrates of VAT class E in format ##.##%</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<VATrateA[1..7]> <;> <VATrateB[1..7]> <;> <VATrateC[1..7]> <;> <VATrateD[1..7]> <;> <VATrateE[1..7]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""OpenDebitNoteWithFreeCustomerData"" CmdByte=""0x30"">
    <FPOperation>Opens a fiscal invoice debit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation>
    <Args>
      <Arg Name=""reserved"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""reserved"" Value=""     0"" Type=""OptionHardcoded"" MaxLen=""6"" />
      <Arg Name=""reserved"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""InvoiceDebitNoteType"" Value=""@"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""CompanyName"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for Invoice company name</Desc>
      </Arg>
      <Arg Name=""ClientPINnum"" Value="""" Type=""Text"" MaxLen=""14"">
        <Desc>14 symbols for client PIN number</Desc>
      </Arg>
      <Arg Name=""HeadQuarters"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for customer headquarters</Desc>
      </Arg>
      <Arg Name=""Address"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for Address</Desc>
      </Arg>
      <Arg Name=""PostalCodeAndCity"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for postal code and city</Desc>
      </Arg>
      <Arg Name=""ExemptionNum"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for exemption number</Desc>
      </Arg>
      <Arg Name=""RelatedInvoiceNum"" Value="""" Type=""Text"" MaxLen=""19"">
        <Desc>19 symbols for the related invoice number in format 
###################</Desc>
      </Arg>
      <Arg Name=""TraderSystemInvNum"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for trader system invoice number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <reserved['1']> <;> <reserved['     0']> <;> <reserved['0']> <;> <InvoiceDebitNoteType['@']> <;> <CompanyName[30]> <;> <ClientPINnum[14]> <;> <HeadQuarters[30]> <;> <Address[30]> <;> <PostalCodeAndCity[30]> <;> <ExemptionNum[30]> <;> <RelatedInvoiceNum[19]><;><TraderSystemInvNum[15]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadLastAndTotalReceiptNum"" CmdByte=""0x71"">
    <FPOperation>Provides information about the number of the last issued receipt.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""LastCUInvoiceNum"" Value="""" Type=""Text"" MaxLen=""19"">
        <Desc>19 symbols for the last number of invoice according the middleware, CU, 
internal invoice counter</Desc>
      </Res>
      <Res Name=""LastReceiptNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""0000000"">
        <Desc>7 symbols for last receipt number in format #######</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<LastCUInvoiceNum[19]> <;> <LastReceiptNum[7]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ClearDisplay"" CmdByte=""0x24"">
    <FPOperation>Clears the external display.</FPOperation>
  </Command>
  <Command Name=""SetDHCP_Enabled"" CmdByte=""0x4E"">
    <FPOperation>Program device's TCP network DHCP enabled or disabled. To apply use -SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionDHCPEnabled"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Disabled"" Value=""0"" />
          <Option Name=""Enabled"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - Disabled 
 - '1' - Enabled</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'T'><;><'1'><;><DHCPEnabled[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetGPRS_APN"" CmdByte=""0x4E"">
    <FPOperation>Program device's GPRS APN. To apply use -SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""gprsAPNlength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the APN len</Desc>
      </Arg>
      <Arg Name=""APN"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS APN</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'G'><;><'A'><;><gprsAPNlength[1..3]><;><APN[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadGPRS_AuthenticationType"" CmdByte=""0x4E"">
    <FPOperation>Read GPRS APN authentication type</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'N'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionAuthenticationType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""CHAP"" Value=""2"" />
          <Option Name=""None"" Value=""0"" />
          <Option Name=""PAP"" Value=""1"" />
          <Option Name=""PAP or CHAP"" Value=""3"" />
        </Options>
        <Desc>1 symbol with value: 
- '0' - None 
- '1' - PAP 
- '2' - CHAP 
- '3' - PAP or CHAP</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'G'><;><'N'><;><AuthenticationType[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetSerialNum"" CmdByte=""0x40"">
    <FPOperation>Stores the Manufacturing number into the operative memory.</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6-symbols string</Desc>
      </Arg>
      <Arg Name=""SerialNum"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols Manufacturing number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Password[6]> <;> <SerialNum[20]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""RawRead"" CmdByte=""0xFF"">
    <FPOperation> Reads raw bytes from FP.</FPOperation>
    <Args>
      <Arg Name=""Count"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>How many bytes to read if EndChar is not specified</Desc>
      </Arg>
      <Arg Name=""EndChar"" Value="""" Type=""Text"" MaxLen=""1"">
        <Desc>The character marking the end of the data. If present Count parameter is ignored.</Desc>
      </Arg>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Bytes"" Value="""" Type=""Base64"" MaxLen=""100000"">
        <Desc>FP raw response in BASE64 encoded string</Desc>
      </Res>
    </Response>
  </Command>
  <Command Name=""ScanAndPrintWifiNetworks"" CmdByte=""0x4E"">
    <FPOperation>Scan and print available wifi networks</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'W'><;><'S'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDHCP_Status"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's DHCP status</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'T'><;><'1'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionDHCPEnabled"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Disabled"" Value=""0"" />
          <Option Name=""Enabled"" Value=""1"" />
        </Options>
        <Desc>(Status) 1 symbols for device's DHCP status 
- '0' - Disabled 
 - '1' - Enabled</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'T'><;><'1'><;><DHCPEnabled[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""DisplayDateTime"" CmdByte=""0x28"">
    <FPOperation>Shows the current date and time on the external display.</FPOperation>
  </Command>
  <Command Name=""SetTCP_AutoStart"" CmdByte=""0x4E"">
    <FPOperation>Program device's autostart TCP conection in sale/line mode. To apply use -SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionTCPAutoStart"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - No 
 - '1' - Yes</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'Z'><;><'2'><;><TCPAutoStart[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetTCP_ActiveModule"" CmdByte=""0x4E"">
    <FPOperation>Selects the active communication module - LAN or WiFi. This option can be set only if the device has both modules at the same time. To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionUsedModule"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""LAN module"" Value=""1"" />
          <Option Name=""WiFi module"" Value=""2"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - LAN module 
 - '2' - WiFi module</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'Z'><;><'U'><;><UsedModule[1]><;> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadTCP_UsedModule"" CmdByte=""0x4E"">
    <FPOperation>Provides information about which module the device is in use: LAN or WiFi module. This information can be provided if the device has mounted both modules.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'Z'><;><'U'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionUsedModule"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""LAN module"" Value=""1"" />
          <Option Name=""WiFi module"" Value=""2"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - LAN module 
 - '2' - WiFi module</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'Z'><;><'U'><;><UsedModule[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadTCP_MACAddress"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's MAC address.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'T'><;><'6' > ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""MACAddress"" Value="""" Type=""Text"" MaxLen=""12"">
        <Desc>12 symbols for the device's MAC address</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'T'><;><'6'><;><MACAddress[12]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""CloseReceipt"" CmdByte=""0x38"">
    <FPOperation>Closes the opened fiscal receipt and returns receipt info.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""InvoiceNum"" Value="""" Type=""Text"" MaxLen=""19"">
        <Desc>19 symbols for CU invoice number</Desc>
      </Res>
      <Res Name=""QRcode"" Value="""" Type=""Text"" MaxLen=""128"">
        <Desc>128 symbols for QR code</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<InvoiceNum[19]<;><QRcode[128]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""OpenCreditNoteWithFreeCustomerData"" CmdByte=""0x30"">
    <FPOperation>Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation>
    <Args>
      <Arg Name=""reserved"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""reserved"" Value=""     0"" Type=""OptionHardcoded"" MaxLen=""6"" />
      <Arg Name=""reserved"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""InvoiceDebitNoteType"" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""CompanyName"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for Invoice company name</Desc>
      </Arg>
      <Arg Name=""ClientPINnum"" Value="""" Type=""Text"" MaxLen=""14"">
        <Desc>14 symbols for client PIN number</Desc>
      </Arg>
      <Arg Name=""HeadQuarters"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for customer headquarters</Desc>
      </Arg>
      <Arg Name=""Address"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for Address</Desc>
      </Arg>
      <Arg Name=""PostalCodeAndCity"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for postal code and city</Desc>
      </Arg>
      <Arg Name=""ExemptionNum"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for exemption number</Desc>
      </Arg>
      <Arg Name=""RelatedInvoiceNum"" Value="""" Type=""Text"" MaxLen=""19"">
        <Desc>19 symbols for the related invoice number in format 
###################</Desc>
      </Arg>
      <Arg Name=""TraderSystemInvNum"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for trader system invoice number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <reserved['1']> <;> <reserved['     0']> <;> <reserved['0']> <;> <InvoiceDebitNoteType['A']> <;> <CompanyName[30]> <;> <ClientPINnum[14]> <;> <HeadQuarters[30]> <;> <Address[30]> <;> <PostalCodeAndCity[30]> <;> <ExemptionNum[30]> <;> <RelatedInvoiceNum[19]><;><TraderSystemInvNum[15]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""DisplayTextLine2"" CmdByte=""0x26"">
    <FPOperation>Shows a 16-symbols text in the lower external display line.</FPOperation>
    <Args>
      <Arg Name=""Text"" Value="""" Type=""Text"" MaxLen=""16"">
        <Desc>16 symbols text</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Text[16]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetWiFi_Password"" CmdByte=""0x4E"">
    <FPOperation>Program device's TCP WiFi password where it will be connected. To apply use -SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the WiFi password len</Desc>
      </Arg>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's WiFi password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'W'><;><'P'><;><PassLength[1..3]><;><Password[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadInfoFromLastServerCommunication"" CmdByte=""0x5A"">
    <FPOperation>Provide information from the last communication with the server.</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionServerResponse"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""At send EOD"" Value=""Z"" />
          <Option Name=""At send receipt"" Value=""R"" />
        </Options>
        <Desc>1 symbol with value 
- 'R' - At send receipt 
- 'Z' - At send EOD</Desc>
      </Arg>
      <Arg Name=""OptionTransactionType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Error Code"" Value=""c"" />
          <Option Name=""Error Message"" Value=""m"" />
          <Option Name=""Exception Message"" Value=""e"" />
          <Option Name=""Status"" Value=""s"" />
        </Options>
        <Desc>1 symbol with value 
- 'c' - Error Code 
- 'm' - Error Message 
- 's' - Status 
- 'e' - Exception Message</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option['S']><;> <ServerResponse[1]><;><TransactionType[1]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Option"" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionServerResponse"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""At send EOD"" Value=""Z"" />
          <Option Name=""At send receipt"" Value=""R"" />
        </Options>
        <Desc>1 symbol with value 
- 'R' - At send receipt 
- 'Z' - At send EOD</Desc>
      </Res>
      <Res Name=""OptionTransactionType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Error Code"" Value=""c"" />
          <Option Name=""Error Message"" Value=""m"" />
          <Option Name=""Exception Message"" Value=""e"" />
          <Option Name=""Status"" Value=""s"" />
        </Options>
        <Desc>1 symbol with value 
- 'c' - Error Code 
- 'm' - Error Message 
- 's' - Status 
- 'e' - Exception Message</Desc>
      </Res>
      <Res Name=""Message"" Value="""" Type=""Decimal"" MaxLen=""200"">
        <Desc>Up to 200 symbols for the message from the server</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Option['S']><;> <ServerResponse[1]><;><TransactionType[1]><;><Message[0..200]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ConfirmFiscalization"" CmdByte=""0x41"">
    <FPOperation>Confirm PIN number.</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6-symbols string</Desc>
      </Arg>
      <Arg Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <Password[6]> <;> <'2'>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""StoreEJ"" CmdByte=""0x7C"">
    <FPOperation>Store whole Electronic Journal report to External USB Flash memory, External SD card.</FPOperation>
    <Args>
      <Arg Name=""OptionReportStorage"" Value="""" Type=""Option"" MaxLen=""2"">
        <Options>
          <Option Name=""Storage in External SD card memory"" Value=""J4"" />
          <Option Name=""Storage in External SD card memory for JSON"" Value=""JX"" />
          <Option Name=""Storage in External USB Flash memory"" Value=""J2"" />
          <Option Name=""Storage in External USB Flash memory for JSON"" Value=""Jx"" />
        </Options>
        <Desc>2 symbols for destination: 
 - 'J2' - Storage in External USB Flash memory 
 - 'J4' - Storage in External SD card memory 
 - 'Jx' - Storage in External USB Flash memory for JSON 
 - 'JX' - Storage in External SD card memory for JSON</Desc>
      </Arg>
      <Arg Name="""" Value=""*"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <OptionReportStorage[2]><;><'*'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDeviceModuleSupportByFirmware"" CmdByte=""0x4E"">
    <FPOperation>FlagsModule is a char with bits representing modules supported by the firmware</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'D'><;><'S'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionLAN"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for LAN suppor 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionWiFi"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for WiFi support 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionGPRS"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for GPRS support 
- '0' - No 
 - '1' - Yes 
BT (Bluetooth) 1 symbol for Bluetooth support 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionBT"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>(Bluetooth) 1 symbol for Bluetooth support 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'D'><;><'S'><;><LAN[1]><;><WiFi>[1]><;><GPRS>[1]><;><BT[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadWiFi_Password"" CmdByte=""0x4E"">
    <FPOperation>Providing information about WiFi password where the device is connected.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'W'><;><'P'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the WiFi password length</Desc>
      </Res>
      <Res Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's WiFi password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'W'><;><'P'><;><PassLength[1..3]><;><Password[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadNTP_Address"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's NTP address.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'N' > ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""AddressLen"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the address length</Desc>
      </Res>
      <Res Name=""NTPAddress"" Value="""" Type=""Text"" MaxLen=""50"">
        <Desc>(NTP Address)50 symbols for the device's NTP address</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'N'><;><AddressLen[1..3]><;><NTPAddress[50]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDailyAmountsByVAT"" CmdByte=""0x6D"">
    <FPOperation>Provides information about the accumulated amounts and refunded amounts by VAT class in case that CU regularly informs about the Z report(7C)</FPOperation>
    <Response ACK=""false"">
      <Res Name=""SaleAmountVATGrA"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the amount accumulated in the VAT group A</Desc>
      </Res>
      <Res Name=""SaleAmountVATGrB"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the amount accumulated in the VAT group B</Desc>
      </Res>
      <Res Name=""SaleAmountVATGrC"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the amount accumulated in the VAT group C</Desc>
      </Res>
      <Res Name=""SaleAmountVATGrD"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the amount accumulated in the VAT group D</Desc>
      </Res>
      <Res Name=""SaleAmountVATGrE"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the amount accumulated in the VAT group E</Desc>
      </Res>
      <Res Name=""TurnoverAmountVAT"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the turnover amount for VATs A, B, C, D</Desc>
      </Res>
      <Res Name=""RefundAmountVATGrA"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the refund amount accumulated in the VAT group A</Desc>
      </Res>
      <Res Name=""RefundAmountVATGrB"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the refund amount accumulated in the VAT group B</Desc>
      </Res>
      <Res Name=""RefundAmountVATGrC"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the refund amount accumulated in the VAT group C</Desc>
      </Res>
      <Res Name=""RefundAmountVATGrD"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the refund amount accumulated in the VAT group D</Desc>
      </Res>
      <Res Name=""RefundAmountVATGrE"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the refund amount accumulated in the VAT group E</Desc>
      </Res>
      <Res Name=""TurnoverRefAmountVAT"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to 13 symbols for the refund turnover amount for VATs A, B, C, D</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<SaleAmountVATGrA[1..13]> <;> <SaleAmountVATGrB[1..13]> <;> <SaleAmountVATGrC[1..13]> <;><SaleAmountVATGrD[1..13]> <;><SaleAmountVATGrE[1..13]> <;> <TurnoverAmountVAT[1..13]> <;> <RefundAmountVATGrA[1..13]> <;> <RefundAmountVATGrB[1..13]> <;> <RefundAmountVATGrC[1..13]> <;> <RefundAmountVATGrD[1..13]> <;> <RefundAmountVATGrE[1..13]> <;> <TurnoverRefAmountVAT[1..13]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadTotalMessagesCount"" CmdByte=""0x4E"">
    <FPOperation>Reads all messages from log</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""L"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'L'><;><'0'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""L"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""Count"" Value="""" Type=""Text"" MaxLen=""3"">
        <Desc>3 symbols for the messages count</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'L'><;><'0'><;><Count[3]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetInvoice_ThresholdCount"" CmdByte=""0x4E"">
    <FPOperation>Programs invoice threshold count</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Value"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for value</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'S'><;><'I'><;><Value[1..5]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetServer_UsedComModule"" CmdByte=""0x4E"">
    <FPOperation>Program device used to talk with the server . To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionModule"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""GSM"" Value=""0"" />
          <Option Name=""LAN/WiFi"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - GSM 
 - '1' - LAN/WiFi</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'S'><;><'E'><;><Module[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetTCP_Password"" CmdByte=""0x4E"">
    <FPOperation>Program device's TCP password. To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the password len</Desc>
      </Arg>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the TCP password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'Z'><;><'1'><;><PassLength[1..3]><;><Password[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetGPRS_AuthenticationType"" CmdByte=""0x4E"">
    <FPOperation>Programs GPRS APN authentication type</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionAuthenticationType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""CHAP"" Value=""2"" />
          <Option Name=""None"" Value=""0"" />
          <Option Name=""PAP"" Value=""1"" />
          <Option Name=""PAP or CHAP"" Value=""3"" />
        </Options>
        <Desc>1 symbol with value: 
- '0' - None 
- '1' - PAP 
- '2' - CHAP 
- '3' - PAP or CHAP</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'G'><;><'N'><;><AuthenticationType[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadCurrentReceiptInfo"" CmdByte=""0x72"">
    <FPOperation>Read the current status of the receipt.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""OptionIsReceiptOpened"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""SalesNumber"" Value="""" Type=""Text"" MaxLen=""3"">
        <Desc>3 symbols for number of sales</Desc>
      </Res>
      <Res Name=""SubtotalAmountVATGA"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for subtotal by VAT group A</Desc>
      </Res>
      <Res Name=""SubtotalAmountVATGB"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for subtotal by VAT group B</Desc>
      </Res>
      <Res Name=""SubtotalAmountVATGC"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for subtotal by VAT group C</Desc>
      </Res>
      <Res Name=""SubtotalAmountVATGD"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for subtotal by VAT group D</Desc>
      </Res>
      <Res Name=""SubtotalAmountVATGE"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for subtotal by VAT group E</Desc>
      </Res>
      <Res Name=""reserved1"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""reserved2"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionReceiptFormat"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Brief"" Value=""0"" />
          <Option Name=""Detailed"" Value=""1"" />
        </Options>
        <Desc>(Format) 1 symbol with value: 
 - '1' - Detailed 
 - '0' - Brief</Desc>
      </Res>
      <Res Name=""reserved3"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""reserved4"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionClientReceipt"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""invoice (client) receipt"" Value=""1"" />
          <Option Name=""standard receipt"" Value=""0"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - invoice (client) receipt 
 - '0' - standard receipt</Desc>
      </Res>
      <Res Name=""OptionPowerDownInReceipt"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
- '0' - No 
- '1' - Yes</Desc>
      </Res>
      <Res Name=""reserved5"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<IsReceiptOpened[1]> <;> <SalesNumber[3]> <;> <SubtotalAmountVATGA[1..11]> <;> <SubtotalAmountVATGB[1..11]> <;> <SubtotalAmountVATGC[1..11]> <;> <SubtotalAmountVATGD[1..11]> <;> <SubtotalAmountVATGE[1..11]> <;> <reserved1['0']> <;><reserved2['0']> <;> <ReceiptFormat[1]> <;> <reserved3['0']> <;> <reserved4['0']> <;> <ClientReceipt[1]> <;> <PowerDownInReceipt[1]> <;> <reserved5[1..11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadEJ"" CmdByte=""0x7C"">
    <FPOperation>Read whole Electronic Journal report from beginning to the end.</FPOperation>
    <Args>
      <Arg Name=""OptionReadEJStorage"" Value="""" Type=""Option"" MaxLen=""2"">
        <Options>
          <Option Name=""Reading to PC"" Value=""J0"" />
          <Option Name=""Reading to PC for JSON"" Value=""JY"" />
        </Options>
        <Desc>2 symbols for destination: 
 - 'J0' - Reading to PC 
 - 'JY' - Reading to PC for JSON</Desc>
      </Arg>
      <Arg Name="""" Value=""*"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ < ReadEJStorage [2]><;><'*'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""ScanWiFiNetworks"" CmdByte=""0x4E"">
    <FPOperation>The device scan out the list of available WiFi networks.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'W'><;><'S'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetDeviceTCP_Addresses"" CmdByte=""0x4E"">
    <FPOperation>Program device's network IP address, subnet mask, gateway address, DNS address. To apply use -SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionAddressType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""DNS address"" Value=""5"" />
          <Option Name=""Gateway address"" Value=""4"" />
          <Option Name=""IP address"" Value=""2"" />
          <Option Name=""Subnet Mask"" Value=""3"" />
        </Options>
        <Desc>1 symbol with value: 
 - '2' - IP address 
 - '3' - Subnet Mask 
 - '4' - Gateway address 
 - '5' - DNS address</Desc>
      </Arg>
      <Arg Name=""DeviceAddress"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for the selected address</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'T'><;><AddressType[1]> <;><DeviceAddress[15]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadStatus"" CmdByte=""0x20"">
    <FPOperation>Provides detailed 6-byte information about the current status of the CU.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""Power_down_in_opened_fiscal_receipt"" Value="""" Type=""Status"" Byte=""0"" Bit=""1"">
        <Desc>Power down in opened fiscal receipt</Desc>
      </Res>
      <Res Name=""DateTime_not_set"" Value="""" Type=""Status"" Byte=""0"" Bit=""3"">
        <Desc>DateTime not set</Desc>
      </Res>
      <Res Name=""DateTime_wrong"" Value="""" Type=""Status"" Byte=""0"" Bit=""4"">
        <Desc>DateTime wrong</Desc>
      </Res>
      <Res Name=""RAM_reset"" Value="""" Type=""Status"" Byte=""0"" Bit=""5"">
        <Desc>RAM reset</Desc>
      </Res>
      <Res Name=""Hardware_clock_error"" Value="""" Type=""Status"" Byte=""0"" Bit=""6"">
        <Desc>Hardware clock error</Desc>
      </Res>
      <Res Name=""Reports_registers_Overflow"" Value="""" Type=""Status"" Byte=""1"" Bit=""1"">
        <Desc>Reports registers Overflow</Desc>
      </Res>
      <Res Name=""Opened_Fiscal_Receipt"" Value="""" Type=""Status"" Byte=""2"" Bit=""1"">
        <Desc>Opened Fiscal Receipt</Desc>
      </Res>
      <Res Name=""Receipt_Invoice_Type"" Value="""" Type=""Status"" Byte=""2"" Bit=""2"">
        <Desc>Receipt Invoice Type</Desc>
      </Res>
      <Res Name=""SD_card_near_full"" Value="""" Type=""Status"" Byte=""2"" Bit=""5"">
        <Desc>SD card near full</Desc>
      </Res>
      <Res Name=""SD_card_full"" Value="""" Type=""Status"" Byte=""2"" Bit=""6"">
        <Desc>SD card full</Desc>
      </Res>
      <Res Name=""CU_fiscalized"" Value="""" Type=""Status"" Byte=""3"" Bit=""5"">
        <Desc>CU fiscalized</Desc>
      </Res>
      <Res Name=""CU_produced"" Value="""" Type=""Status"" Byte=""3"" Bit=""6"">
        <Desc>CU produced</Desc>
      </Res>
      <Res Name=""Paired_with_TIMS"" Value="""" Type=""Status"" Byte=""4"" Bit=""0"">
        <Desc>Paired with TIMS</Desc>
      </Res>
      <Res Name=""Unsent_receipts"" Value="""" Type=""Status"" Byte=""4"" Bit=""1"">
        <Desc>Unsent receipts</Desc>
      </Res>
      <Res Name=""No_Sec_IC"" Value="""" Type=""Status"" Byte=""5"" Bit=""0"">
        <Desc>No Sec.IC</Desc>
      </Res>
      <Res Name=""No_certificates"" Value="""" Type=""Status"" Byte=""5"" Bit=""1"">
        <Desc>No certificates</Desc>
      </Res>
      <Res Name=""Service_jumper"" Value="""" Type=""Status"" Byte=""5"" Bit=""2"">
        <Desc>Service jumper</Desc>
      </Res>
      <Res Name=""Missing_SD_card"" Value="""" Type=""Status"" Byte=""5"" Bit=""4"">
        <Desc>Missing SD card</Desc>
      </Res>
      <Res Name=""Wrong_SD_card"" Value="""" Type=""Status"" Byte=""5"" Bit=""5"">
        <Desc>Wrong SD card</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<StatusBytes[6]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""OpenReceipt"" CmdByte=""0x30"">
    <FPOperation>Opens a fiscal receipt assigned to the specified operator number and operator password, parameters for receipt format and VAT type.</FPOperation>
    <Args>
      <Arg Name=""reserved"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""reserved"" Value=""     0"" Type=""OptionHardcoded"" MaxLen=""6"" />
      <Arg Name=""OptionReceiptFormat"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Brief"" Value=""0"" />
          <Option Name=""Detailed"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - Detailed 
 - '0' - Brief</Desc>
      </Arg>
      <Arg Name=""ReceiptType"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""TraderSystemInvNum"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for trader system invoice number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<reserved['1']> <;> <reserved['     0']> <;> < ReceiptFormat [1]> <;> <ReceiptType['0']><;><TraderSystemInvNum[15]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetDateTime"" CmdByte=""0x48"">
    <FPOperation>Sets the date and time and current values.</FPOperation>
    <Args>
      <Arg Name=""DateTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yy HH:mm"">
        <Desc>Date Time parameter in format: DD-MM-YY HH:MM</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <DateTime ""DD-MM-YY HH:MM""> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SellPLUfromExtDB"" CmdByte=""0x31"">
    <FPOperation>Register the sell (for correction use minus sign in the price field) of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.</FPOperation>
    <Args>
      <Arg Name=""NamePLU"" Value="""" Type=""Text"" MaxLen=""36"">
        <Desc>36 symbols for article's name</Desc>
      </Arg>
      <Arg Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
        </Options>
        <Desc>1 symbol for article's VAT class with optional values:"" 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E</Desc>
      </Arg>
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for article's price</Desc>
      </Arg>
      <Arg Name=""MeasureUnit"" Value="""" Type=""Text"" MaxLen=""3"">
        <Desc>3 symbols for measure unit</Desc>
      </Arg>
      <Arg Name=""HSCode"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for HS Code in format XXXX.XX.XX</Desc>
      </Arg>
      <Arg Name=""HSName"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols for HS Name</Desc>
      </Arg>
      <Arg Name=""VATGrRate"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for programmable VAT rate</Desc>
      </Arg>
      <Arg Name=""Quantity"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>1 to 10 symbols for quantity</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence=""*"" />
      </Arg>
      <Arg Name=""DiscAddP"" Value="""" Type=""Decimal"" MaxLen=""7"">
        <Desc>1 to 7 for percentage of discount/addition</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="","" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <NamePLU[36]> <;> <OptionVATClass[1]> <;> <Price[1..10]> <;> <MeasureUnit[3]> <;><HSCode[10]> <;> <HSName[20]> <;> <VATGrRate[1..5]>  {<'*'> <Quantity[1..10]>} {<','> <DiscAddP[1..7]>}  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""StartGPRStest"" CmdByte=""0x4E"">
    <FPOperation>Start GPRS test on the device the result</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'T'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""OpenInvoiceWithFreeCustomerData"" CmdByte=""0x30"">
    <FPOperation>Opens a fiscal invoice receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation>
    <Args>
      <Arg Name=""reserved"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""reserved"" Value=""     0"" Type=""OptionHardcoded"" MaxLen=""6"" />
      <Arg Name=""reserved"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""InvoiceType"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""CompanyName"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for Invoice company name</Desc>
      </Arg>
      <Arg Name=""ClientPINnum"" Value="""" Type=""Text"" MaxLen=""14"">
        <Desc>14 symbols for client PIN number</Desc>
      </Arg>
      <Arg Name=""HeadQuarters"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for customer headquarters</Desc>
      </Arg>
      <Arg Name=""Address"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for Address</Desc>
      </Arg>
      <Arg Name=""PostalCodeAndCity"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for postal code and city</Desc>
      </Arg>
      <Arg Name=""ExemptionNum"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for exemption number</Desc>
      </Arg>
      <Arg Name=""TraderSystemInvNum"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for trader system invoice number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <reserved['1']> <;> <reserved['     0']> <;> <reserved['0']> <;> <InvoiceType['1']> <;> <CompanyName[30]> <;> <ClientPINnum[14]> <;> <HeadQuarters[30]> <;> <Address[30]> <;> <PostalCodeAndCity[30]> <;> <ExemptionNum[30]> <;><TraderSystemInvNum[15]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetGPRS_Password"" CmdByte=""0x4E"">
    <FPOperation>Program device's GPRS password. To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the GPRS password len</Desc>
      </Arg>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'G'><;><'P'><;><PassLength[1..3]><;><Password[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SoftwareReset"" CmdByte=""0x3F"">
    <FPOperation>Restore default parameters of the device.</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6-symbols string</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Password[6]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""DailyReport"" CmdByte=""0x7C"">
    <FPOperation>Provides information for the daily fiscal report  with zeroing and fiscal memory record, preceded by Electronic Journal report.</FPOperation>
    <Args>
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'Z'>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadTCP_Password"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's TCP password.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'Z'><;><'1'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the password length</Desc>
      </Res>
      <Res Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>(Password) Up to 100 symbols for the TCP password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'Z'><;><'1'><;><PassLength[1..3]><;><Password[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgVATrates"" CmdByte=""0x42"">
    <FPOperation>Stores a block containing the values of the VAT rates into the CU</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6-symbols string</Desc>
      </Arg>
      <Arg Name=""VATrateA"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate A from 2 to 6 symbols with format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateB"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate B from 2 to 6 symbols with format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateC"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate C from 2 to 6 symbols with format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateD"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate D from 2 to 6 symbols with format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateE"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate E from 2 to 6 symbols with format ##.##</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Password[6]> <;> <VATrateA[1..6]> <;> <VATrateB[1..6]> <;> <VATrateC[1..6]> <;> <VATrateD[1..6]> <;><VATrateE[1..6]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetDeviceNTP_Address"" CmdByte=""0x4E"">
    <FPOperation>Program device's NTP address . To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""AddressLen"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the address length</Desc>
      </Arg>
      <Arg Name=""NTPAddress"" Value="""" Type=""Text"" MaxLen=""50"">
        <Desc>50 symbols for the device's NTP address</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'S'><;><'N'> <;><AddressLen[1..3]><;><NTPAddress[50]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadEJByDate"" CmdByte=""0x7C"">
    <FPOperation>Read Electronic Journal Report initial date to report end date.</FPOperation>
    <Args>
      <Arg Name=""OptionReadEJStorage"" Value="""" Type=""Option"" MaxLen=""2"">
        <Options>
          <Option Name=""Reading to PC"" Value=""J0"" />
          <Option Name=""Reading to PC for JSON"" Value=""JY"" />
        </Options>
        <Desc>2 symbols for destination: 
 - 'J0' - Reading to PC 
 - 'JY' - Reading to PC for JSON</Desc>
      </Arg>
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartRepFromDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for initial date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""EndRepFromDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for final date in the DDMMYY format</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ < ReadEJStorage [2]><;><'D'><;><StartRepFromDate ""DDMMYY""><;>  <EndRepFromDate ""DDMMYY""> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""InfoLastReceiptDuplicate"" CmdByte=""0x3A"">
    <FPOperation>Informs about the issued document</FPOperation>
  </Command>
  <Command Name=""SetIdle_Timeout"" CmdByte=""0x4E"">
    <FPOperation>Program device's idle timeout setting. Set timeout for closing the connection if there is an inactivity. Maximal value - 7200, minimal value 1. 0 is for never close the connection. This option can be used only if the device has LAN or WiFi. To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""IdleTimeout"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for Idle timeout in format ####</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'Z'><;><'I'><;><IdleTimeout[4]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadTCP_AutoStartStatus"" CmdByte=""0x4E"">
    <FPOperation>Provides information about if the TCP connection autostart when the device enter in Line/Sale mode.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'Z'><;><'2'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionTCPAutoStart"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for TCP auto start option 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'Z'><;><'2'><;><TCPAutoStart[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadGPRS_Password"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's GPRS password.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'P'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the GPRS password length</Desc>
      </Res>
      <Res Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'G'><;><'P'><;><PassLength[1..3]><;><Password[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadServer_UsedComModule"" CmdByte=""0x4E"">
    <FPOperation>Read device communication usage with server</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'E'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionModule"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""GSM"" Value=""0"" />
          <Option Name=""LAN/WiFi"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - GSM 
 - '1' - LAN/WiFi</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'E'><;><Module [1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadSpecificMessage"" CmdByte=""0x4E"">
    <FPOperation>Reads specific message number</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""L"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""MessageNum"" Value="""" Type=""Text"" MaxLen=""2"">
        <Desc>2 symbols for total number of messages</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'R'><;><'L'><;><MessageNum[2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""L"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""MessageNum"" Value="""" Type=""Text"" MaxLen=""2"">
        <Desc>2 symbols for total number of messages</Desc>
      </Res>
      <Res Name=""DateTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>Date Time parameter</Desc>
      </Res>
      <Res Name=""Type"" Value="""" Type=""Text"" MaxLen=""1"">
        <Desc>1 symbol for type</Desc>
      </Res>
      <Res Name=""Code"" Value="""" Type=""Text"" MaxLen=""3"">
        <Desc>3 symbols for code</Desc>
      </Res>
      <Res Name=""MessageText"" Value="""" Type=""Text"" MaxLen=""128"">
        <Desc>Up to 128 symbols for message text</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'L'><;><MessageNum[2]><;> <DateTime ""DD-MM-YYYY HH:MM""> <;><Type[1]><;><Code[3]> <;><MessageText[128]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetHTTPS_Address"" CmdByte=""0x4E"">
    <FPOperation>Programs server HTTPS address.</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""H"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""ParamLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for parameter length</Desc>
      </Arg>
      <Arg Name=""Address"" Value="""" Type=""Text"" MaxLen=""50"">
        <Desc>50 symbols for address</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'S'><;><'H'><;><ParamLength[1..3]><;><Address[50]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetPINnumber"" CmdByte=""0x41"">
    <FPOperation>Stores PIN number in operative memory.</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6-symbols string</Desc>
      </Arg>
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PINnum"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for PIN registration number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Password[6]> <;> <'1'> <;> <PINnum[11]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadOrStoreInvoiceCopy"" CmdByte=""0x7C"">
    <FPOperation>Read/Store Invoice receipt copy to External USB Flash memory, External SD card.</FPOperation>
    <Args>
      <Arg Name=""OptionInvoiceCopy"" Value="""" Type=""Option"" MaxLen=""2"">
        <Options>
          <Option Name=""Reading"" Value=""J0"" />
          <Option Name=""Storage in External SD card memory"" Value=""J4"" />
          <Option Name=""Storage in External USB Flash memory."" Value=""J2"" />
        </Options>
        <Desc>2 symbols for destination: 
 - 'J0' - Reading  
 - 'J2' - Storage in External USB Flash memory. 
 - 'J4' - Storage in External SD card memory</Desc>
      </Arg>
      <Arg Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""CUInvoiceNum"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for Invoice receipt Number.</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionInvoiceCopy[2]><;><'I'><;> <CUInvoiceNum[10]>  ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""StartLANtest"" CmdByte=""0x4E"">
    <FPOperation>Start LAN test on the device the result</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'T'><;><'T'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDeviceModuleSupport"" CmdByte=""0x4E"">
    <FPOperation>FlagsModule is a char with bits representing modules supported by the device.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'D'><;><'D'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionLAN"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for LAN suppor 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionWiFi"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for WiFi support 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionGPRS"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for GPRS support 
- '0' - No 
 - '1' - Yes 
BT (Bluetooth) 1 symbol for Bluetooth support 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionBT"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>(Bluetooth) 1 symbol for Bluetooth support 
- '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'D'><;><'D'><;><LAN[1]><;><WiFi>[1]><;><GPRS>[1]><;><BT[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadWiFi_NetworkName"" CmdByte=""0x4E"">
    <FPOperation>Provides information about WiFi network name where the device is connected.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'W'><;><'N'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""WiFiNameLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the WiFi name length</Desc>
      </Res>
      <Res Name=""WiFiNetworkName"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>(Name) Up to 100 symbols for the device's WiFi network name</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'W'><;><'N'><;><WiFiNameLength[1..3]><;><WiFiNetworkName[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadVersion"" CmdByte=""0x21"">
    <FPOperation>Provides information about the device version.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""Version"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>Up to 30 symbols for Version name and Check sum</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Version[30]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""RawWrite"" CmdByte=""0xFE"">
    <FPOperation> Writes raw bytes to FP </FPOperation>
    <Args>
      <Arg Name=""Bytes"" Value="""" Type=""Base64"" MaxLen=""5000"">
        <Desc>The bytes in BASE64 ecoded string to be written to FP</Desc>
      </Arg>
    </Args>
  </Command>
  <Command Name=""SetTime_ThresholdMinutes"" CmdByte=""0x4E"">
    <FPOperation>Programs time threshold minutes</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Value"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for value</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'S'><;><'T'><;><Value[1..5]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
</Defs>";
#endregion

     }

               public enum OptionReportStorage
               {
                  /// <summary>
                  /// J4 - 13386
                  /// </summary>
                  Storage_in_External_SD_card_memory = 13386,
                  /// <summary>
                  /// JX - 22602
                  /// </summary>
                  Storage_in_External_SD_card_memory_for_JSON = 22602,
                  /// <summary>
                  /// J2 - 12874
                  /// </summary>
                  Storage_in_External_USB_Flash_memory = 12874,
                  /// <summary>
                  /// Jx - 30794
                  /// </summary>
                  Storage_in_External_USB_Flash_memory_for_JSON = 30794
               }

               public enum OptionAddressType
               {
                  DNS_address = '5',
                  Gateway_address = '4',
                  IP_address = '2',
                  Subnet_Mask = '3'
               }

               public enum OptionDeviceType
               {
                  A_Type = '1',
                  B_Type = '2'
               }

               public enum OptionDHCPEnabled
               {
                  Disabled = '0',
                  Enabled = '1'
               }

               public enum OptionAuthenticationType
               {
                  CHAP = '2',
                  None = '0',
                  PAP = '1',
                  PAP_or_CHAP = '3'
               }

               public enum OptionTCPAutoStart
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionUsedModule
               {
                  LAN_module = '1',
                  WiFi_module = '2'
               }

               public enum OptionServerResponse
               {
                  At_send_EOD = 'Z',
                  At_send_receipt = 'R'
               }

               public enum OptionTransactionType
               {
                  Error_Code = 'c',
                  Error_Message = 'm',
                  Exception_Message = 'e',
                  Status = 's'
               }

               public enum OptionLAN
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionWiFi
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionGPRS
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionBT
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionModule
               {
                  GSM = '0',
                  LANWiFi = '1'
               }

               public enum OptionIsReceiptOpened
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionReceiptFormat
               {
                  Brief = '0',
                  Detailed = '1'
               }

               public enum OptionClientReceipt
               {
                  invoice_client_receipt = '1',
                  standard_receipt = '0'
               }

               public enum OptionPowerDownInReceipt
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionReadEJStorage
               {
                  /// <summary>
                  /// J0 - 12362
                  /// </summary>
                  Reading_to_PC = 12362,
                  /// <summary>
                  /// JY - 22858
                  /// </summary>
                  Reading_to_PC_for_JSON = 22858
               }

               public enum OptionVATClass
               {
                  VAT_Class_A = 'A',
                  VAT_Class_B = 'B',
                  VAT_Class_C = 'C',
                  VAT_Class_D = 'D',
                  VAT_Class_E = 'E'
               }

               public enum OptionInvoiceCopy
               {
                  /// <summary>
                  /// J0 - 12362
                  /// </summary>
                  Reading = 12362,
                  /// <summary>
                  /// J4 - 13386
                  /// </summary>
                  Storage_in_External_SD_card_memory = 13386,
                  /// <summary>
                  /// J2 - 12874
                  /// </summary>
                  Storage_in_External_USB_Flash_memory = 12874
               }

         public class CUnumbersRes
         {
           /// <summary>
           ///20 symbols for individual number of the CU
           /// </summary>
           public string SerialNumber { get; set; }

           /// <summary>
           ///11 symbols for pin number
           /// </summary>
           public string PINnumber { get; set; }
         }

         public class HTTPS_ServerRes
         {
           /// <summary>
           ///Up to 3 symbols for parameter length
           /// </summary>
           public decimal ParamLength { get; set; }

           /// <summary>
           ///50 symbols for address
           /// </summary>
           public string Address { get; set; }
         }

         public class GPRS_APNRes
         {
           /// <summary>
           ///Up to 3 symbols for the APN length
           /// </summary>
           public decimal gprsAPNlength { get; set; }

           /// <summary>
           ///(APN) Up to 100 symbols for the device's GPRS APN
           /// </summary>
           public string APN { get; set; }
         }

         public class GPRS_UsernameRes
         {
           /// <summary>
           ///Up to 3 symbols for the GPRS username length
           /// </summary>
           public decimal gprsUserNameLength { get; set; }

           /// <summary>
           ///Up to 100 symbols for the device's GPRS username
           /// </summary>
           public string Username { get; set; }
         }

         public class DeviceTCP_AddressesRes
         {
           /// <summary>
           ///(Address type) 1 symbol with value: 
           ///  - '2' - IP address 
           ///  - '3' - Subnet Mask 
           ///  - '4' - Gateway address 
           ///  - '5' - DNS address
           /// </summary>
           public OptionAddressType OptionAddressType { get; set; }

           /// <summary>
           ///15 symbols for the device's addresses
           /// </summary>
           public string DeviceAddress { get; set; }
         }

         public class DiagnosticsRes
         {
           /// <summary>
           ///1 symbol for device type: 
           ///  - '1' - A Type 
           ///  - '2' - B Type
           /// </summary>
           public OptionDeviceType OptionDeviceType { get; set; }

           /// <summary>
           ///10 symbols for current SD index position of last sent receipt
           /// </summary>
           public string SDIdxPos { get; set; }

           /// <summary>
           ///19 symbols for number of last invoice according the CU
           /// </summary>
           public string LastInvoiceCUNum { get; set; }

           /// <summary>
           ///6 symbols for last invoice date in the DDMMYY format
           /// </summary>
           public string LastInvoiceDate { get; set; }

           /// <summary>
           ///6 symbols for last sent EOD in the DDMMYY format
           /// </summary>
           public string LastEODDate { get; set; }

           /// <summary>
           ///4 symbold for number of invoices sent for the current day
           /// </summary>
           public string InvoicesSent { get; set; }
         }

         public class VATratesRes
         {
           /// <summary>
           ///(VAT rate A) Up to 7 symbols for VATrates of VAT class A in format ##.##%
           /// </summary>
           public decimal VATrateA { get; set; }

           /// <summary>
           ///(VAT rate B) Up to 7 symbols for VATrates of VAT class B in format ##.##%
           /// </summary>
           public decimal VATrateB { get; set; }

           /// <summary>
           ///(VAT rate C) Up to 7 symbols for VATrates of VAT class C in format ##.##%
           /// </summary>
           public decimal VATrateC { get; set; }

           /// <summary>
           ///(VAT rate D) Up to 7 symbols for VATrates of VAT class D in format ##.##%
           /// </summary>
           public decimal VATrateD { get; set; }

           /// <summary>
           ///(VAT rate E) Up to 7 symbols for VATrates of VAT class E in format ##.##%
           /// </summary>
           public decimal VATrateE { get; set; }
         }

         public class LastAndTotalReceiptNumRes
         {
           /// <summary>
           ///19 symbols for the last number of invoice according the middleware, CU, 
           /// internal invoice counter
           /// </summary>
           public string LastCUInvoiceNum { get; set; }

           /// <summary>
           ///7 symbols for last receipt number in format #######
           /// </summary>
           public decimal LastReceiptNum { get; set; }
         }

         public class CloseReceiptRes
         {
           /// <summary>
           ///19 symbols for CU invoice number
           /// </summary>
           public string InvoiceNum { get; set; }

           /// <summary>
           ///128 symbols for QR code
           /// </summary>
           public string QRcode { get; set; }
         }

         public class InfoFromLastServerCommunicationRes
         {
           /// <summary>
           ///1 symbol with value 
           /// - 'R' - At send receipt 
           /// - 'Z' - At send EOD
           /// </summary>
           public OptionServerResponse OptionServerResponse { get; set; }

           /// <summary>
           ///1 symbol with value 
           /// - 'c' - Error Code 
           /// - 'm' - Error Message 
           /// - 's' - Status 
           /// - 'e' - Exception Message
           /// </summary>
           public OptionTransactionType OptionTransactionType { get; set; }

           /// <summary>
           ///Up to 200 symbols for the message from the server
           /// </summary>
           public decimal Message { get; set; }
         }

         public class DeviceModuleSupportByFirmwareRes
         {
           /// <summary>
           ///1 symbol for LAN suppor 
           /// - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionLAN OptionLAN { get; set; }

           /// <summary>
           ///1 symbol for WiFi support 
           /// - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionWiFi OptionWiFi { get; set; }

           /// <summary>
           ///1 symbol for GPRS support 
           /// - '0' - No 
           ///  - '1' - Yes 
           /// BT (Bluetooth) 1 symbol for Bluetooth support 
           /// - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionGPRS OptionGPRS { get; set; }

           /// <summary>
           ///(Bluetooth) 1 symbol for Bluetooth support 
           /// - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionBT OptionBT { get; set; }
         }

         public class WiFi_PasswordRes
         {
           /// <summary>
           ///Up to 3 symbols for the WiFi password length
           /// </summary>
           public decimal PassLength { get; set; }

           /// <summary>
           ///Up to 100 symbols for the device's WiFi password
           /// </summary>
           public string Password { get; set; }
         }

         public class NTP_AddressRes
         {
           /// <summary>
           ///Up to 3 symbols for the address length
           /// </summary>
           public decimal AddressLen { get; set; }

           /// <summary>
           ///(NTP Address)50 symbols for the device's NTP address
           /// </summary>
           public string NTPAddress { get; set; }
         }

         public class DailyAmountsByVATRes
         {
           /// <summary>
           ///Up to 13 symbols for the amount accumulated in the VAT group A
           /// </summary>
           public decimal SaleAmountVATGrA { get; set; }

           /// <summary>
           ///Up to 13 symbols for the amount accumulated in the VAT group B
           /// </summary>
           public decimal SaleAmountVATGrB { get; set; }

           /// <summary>
           ///Up to 13 symbols for the amount accumulated in the VAT group C
           /// </summary>
           public decimal SaleAmountVATGrC { get; set; }

           /// <summary>
           ///Up to 13 symbols for the amount accumulated in the VAT group D
           /// </summary>
           public decimal SaleAmountVATGrD { get; set; }

           /// <summary>
           ///Up to 13 symbols for the amount accumulated in the VAT group E
           /// </summary>
           public decimal SaleAmountVATGrE { get; set; }

           /// <summary>
           ///Up to 13 symbols for the turnover amount for VATs A, B, C, D
           /// </summary>
           public decimal TurnoverAmountVAT { get; set; }

           /// <summary>
           ///Up to 13 symbols for the refund amount accumulated in the VAT group A
           /// </summary>
           public decimal RefundAmountVATGrA { get; set; }

           /// <summary>
           ///Up to 13 symbols for the refund amount accumulated in the VAT group B
           /// </summary>
           public decimal RefundAmountVATGrB { get; set; }

           /// <summary>
           ///Up to 13 symbols for the refund amount accumulated in the VAT group C
           /// </summary>
           public decimal RefundAmountVATGrC { get; set; }

           /// <summary>
           ///Up to 13 symbols for the refund amount accumulated in the VAT group D
           /// </summary>
           public decimal RefundAmountVATGrD { get; set; }

           /// <summary>
           ///Up to 13 symbols for the refund amount accumulated in the VAT group E
           /// </summary>
           public decimal RefundAmountVATGrE { get; set; }

           /// <summary>
           ///Up to 13 symbols for the refund turnover amount for VATs A, B, C, D
           /// </summary>
           public decimal TurnoverRefAmountVAT { get; set; }
         }

         public class CurrentReceiptInfoRes
         {
           /// <summary>
           ///1 symbol with value: 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionIsReceiptOpened OptionIsReceiptOpened { get; set; }

           /// <summary>
           ///3 symbols for number of sales
           /// </summary>
           public string SalesNumber { get; set; }

           /// <summary>
           ///Up to 11 symbols for subtotal by VAT group A
           /// </summary>
           public decimal SubtotalAmountVATGA { get; set; }

           /// <summary>
           ///Up to 11 symbols for subtotal by VAT group B
           /// </summary>
           public decimal SubtotalAmountVATGB { get; set; }

           /// <summary>
           ///Up to 11 symbols for subtotal by VAT group C
           /// </summary>
           public decimal SubtotalAmountVATGC { get; set; }

           /// <summary>
           ///Up to 11 symbols for subtotal by VAT group D
           /// </summary>
           public decimal SubtotalAmountVATGD { get; set; }

           /// <summary>
           ///Up to 11 symbols for subtotal by VAT group E
           /// </summary>
           public decimal SubtotalAmountVATGE { get; set; }

           /// <summary>
           ///(Format) 1 symbol with value: 
           ///  - '1' - Detailed 
           ///  - '0' - Brief
           /// </summary>
           public OptionReceiptFormat OptionReceiptFormat { get; set; }

           /// <summary>
           ///1 symbol with value: 
           ///  - '1' - invoice (client) receipt 
           ///  - '0' - standard receipt
           /// </summary>
           public OptionClientReceipt OptionClientReceipt { get; set; }

           /// <summary>
           ///1 symbol with value: 
           /// - '0' - No 
           /// - '1' - Yes
           /// </summary>
           public OptionPowerDownInReceipt OptionPowerDownInReceipt { get; set; }

           /// <summary>
           ///Up to 11 symbols
           /// </summary>
           public decimal reserved5 { get; set; }
         }

         public class StatusRes
         {
           /// <summary>
           ///Power down in opened fiscal receipt
           /// </summary>
           public bool Power_down_in_opened_fiscal_receipt { get; set; }

           /// <summary>
           ///DateTime not set
           /// </summary>
           public bool DateTime_not_set { get; set; }

           /// <summary>
           ///DateTime wrong
           /// </summary>
           public bool DateTime_wrong { get; set; }

           /// <summary>
           ///RAM reset
           /// </summary>
           public bool RAM_reset { get; set; }

           /// <summary>
           ///Hardware clock error
           /// </summary>
           public bool Hardware_clock_error { get; set; }

           /// <summary>
           ///Reports registers Overflow
           /// </summary>
           public bool Reports_registers_Overflow { get; set; }

           /// <summary>
           ///Opened Fiscal Receipt
           /// </summary>
           public bool Opened_Fiscal_Receipt { get; set; }

           /// <summary>
           ///Receipt Invoice Type
           /// </summary>
           public bool Receipt_Invoice_Type { get; set; }

           /// <summary>
           ///SD card near full
           /// </summary>
           public bool SD_card_near_full { get; set; }

           /// <summary>
           ///SD card full
           /// </summary>
           public bool SD_card_full { get; set; }

           /// <summary>
           ///CU fiscalized
           /// </summary>
           public bool CU_fiscalized { get; set; }

           /// <summary>
           ///CU produced
           /// </summary>
           public bool CU_produced { get; set; }

           /// <summary>
           ///Paired with TIMS
           /// </summary>
           public bool Paired_with_TIMS { get; set; }

           /// <summary>
           ///Unsent receipts
           /// </summary>
           public bool Unsent_receipts { get; set; }

           /// <summary>
           ///No Sec.IC
           /// </summary>
           public bool No_Sec_IC { get; set; }

           /// <summary>
           ///No certificates
           /// </summary>
           public bool No_certificates { get; set; }

           /// <summary>
           ///Service jumper
           /// </summary>
           public bool Service_jumper { get; set; }

           /// <summary>
           ///Missing SD card
           /// </summary>
           public bool Missing_SD_card { get; set; }

           /// <summary>
           ///Wrong SD card
           /// </summary>
           public bool Wrong_SD_card { get; set; }
         }

         public class TCP_PasswordRes
         {
           /// <summary>
           ///Up to 3 symbols for the password length
           /// </summary>
           public decimal PassLength { get; set; }

           /// <summary>
           ///(Password) Up to 100 symbols for the TCP password
           /// </summary>
           public string Password { get; set; }
         }

         public class GPRS_PasswordRes
         {
           /// <summary>
           ///Up to 3 symbols for the GPRS password length
           /// </summary>
           public decimal PassLength { get; set; }

           /// <summary>
           ///Up to 100 symbols for the device's GPRS password
           /// </summary>
           public string Password { get; set; }
         }

         public class SpecificMessageRes
         {
           /// <summary>
           ///2 symbols for total number of messages
           /// </summary>
           public string MessageNum { get; set; }

           /// <summary>
           ///Date Time parameter
           /// </summary>
           public DateTime DateTime { get; set; }

           /// <summary>
           ///1 symbol for type
           /// </summary>
           public string Type { get; set; }

           /// <summary>
           ///3 symbols for code
           /// </summary>
           public string Code { get; set; }

           /// <summary>
           ///Up to 128 symbols for message text
           /// </summary>
           public string MessageText { get; set; }
         }

         public class DeviceModuleSupportRes
         {
           /// <summary>
           ///1 symbol for LAN suppor 
           /// - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionLAN OptionLAN { get; set; }

           /// <summary>
           ///1 symbol for WiFi support 
           /// - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionWiFi OptionWiFi { get; set; }

           /// <summary>
           ///1 symbol for GPRS support 
           /// - '0' - No 
           ///  - '1' - Yes 
           /// BT (Bluetooth) 1 symbol for Bluetooth support 
           /// - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionGPRS OptionGPRS { get; set; }

           /// <summary>
           ///(Bluetooth) 1 symbol for Bluetooth support 
           /// - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionBT OptionBT { get; set; }
         }

         public class WiFi_NetworkNameRes
         {
           /// <summary>
           ///Up to 3 symbols for the WiFi name length
           /// </summary>
           public decimal WiFiNameLength { get; set; }

           /// <summary>
           ///(Name) Up to 100 symbols for the device's WiFi network name
           /// </summary>
           public string WiFiNetworkName { get; set; }
         }

}
